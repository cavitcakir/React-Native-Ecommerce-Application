{"version":3,"sources":["StateUtils.js"],"names":["StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","nextIndex","nextState","reset","Array","isArray","undefined","compare","ii","every"],"mappings":"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","sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]}