{"version":3,"sources":["StackRouter.js"],"names":["behavesLikePushAction","action","type","NavigationActions","NAVIGATE","StackActions","PUSH","defaultActionCreators","isResetToRootStack","RESET","key","routeConfigs","stackConfig","childRouters","routeNames","Object","keys","forEach","routeName","routeConfig","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","undefined","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","navigate","initialRouteKey","getParamsForRouteAndAction","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","length","dismiss","back","activeChildRouter","StateUtils","replaceAt","SET_PARAMS","childRoute","slice","reverse","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","COMPLETE_TRANSITION","toChildKey","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","backRouteIndex","Math","max","backRoute","keyIndex","preserveFocus","includes","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"mappings":"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","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach(routeName => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey(),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: params => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex(r => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(r => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key !== state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map(newStackAction => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate } = action;\n        let backRouteIndex = state.index;\n        if (action.type === StackActions.POP && n != null) {\n          // determine the index to go back *from*. In this case, n=1 means to go\n          // back from state.index, as if it were a normal \"BACK\" action\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (key) {\n          const backRoute = state.routes.find(route => route.key === key);\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return {\n            ...state,\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true,\n          };\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"]}