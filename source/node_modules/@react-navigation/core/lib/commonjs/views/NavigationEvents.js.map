{"version":3,"sources":["NavigationEvents.js"],"names":["EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","React","Component","eventName","props","componentDidMount","subscriptions","forEach","navigation","addListener","args","propListener","getPropListener","componentWillUnmount","remove","render"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,SAAS,EAAE,aADe;AAE1BC,EAAAA,QAAQ,EAAE,YAFgB;AAG1BC,EAAAA,QAAQ,EAAE,YAHgB;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA5B;AAOA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYP,mBAAZ,CAAnB;;AAEA,MAAMQ,gBAAN,SAA+BC,eAAMC,SAArC,CAA+C;AAAA;AAAA;;AAAA,6CAwB3BC,SAAS,IAAI,KAAKC,KAAL,CAAWZ,mBAAmB,CAACW,SAAD,CAA9B,CAxBc;AAAA;;AAC7CE,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,aAAL,GAAqB,EAArB,CADkB,CAGlB;AACA;AACA;;AACAT,IAAAA,UAAU,CAACU,OAAX,CAAmBJ,SAAS,IAAI;AAC9B,WAAKG,aAAL,CAAmBH,SAAnB,IAAgC,KAAKC,KAAL,CAAWI,UAAX,CAAsBC,WAAtB,CAC9BN,SAD8B,EAE9B,CAAC,GAAGO,IAAJ,KAAa;AACX,cAAMC,YAAY,GAAG,KAAKC,eAAL,CAAqBT,SAArB,CAArB;AACA,eAAOQ,YAAY,IAAIA,YAAY,CAAC,GAAGD,IAAJ,CAAnC;AACD,OAL6B,CAAhC;AAOD,KARD;AASD;;AAEDG,EAAAA,oBAAoB,GAAG;AACrBhB,IAAAA,UAAU,CAACU,OAAX,CAAmBJ,SAAS,IAAI;AAC9B,WAAKG,aAAL,CAAmBH,SAAnB,EAA8BW,MAA9B;AACD,KAFD;AAGD;;AAIDC,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AA5B4C;;eA+BhC,6BAAef,gBAAf,C","sourcesContent":["import React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    this.subscriptions = {};\n\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  getPropListener = eventName => this.props[EventNameToPropName[eventName]];\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]}