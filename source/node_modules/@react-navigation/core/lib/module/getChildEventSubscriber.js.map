{"version":3,"sources":["getChildEventSubscriber.js"],"names":["getChildEventSubscriber","addListener","key","initialLastFocusEvent","actionSubscribers","Set","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","refocusSubscribers","removeAll","forEach","set","clear","upstreamSubscribers","subs","remove","getChildSubscribers","evtName","emit","type","payload","payloadWithType","subscribers","lastFocusEvent","upstreamEvents","map","eventName","state","lastState","action","lastRoutes","routes","focusKey","index","isChildFocused","lastRoute","find","route","newRoute","childPayload","context","isTransitioning","previouslylastFocusEvent","eventHandler","Error","add","delete","console","error"],"mappings":"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","sourcesContent":["/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\nexport default function getChildEventSubscriber(\n  addListener,\n  key,\n  initialLastFocusEvent = 'didBlur'\n) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n  const refocusSubscribers = new Set();\n\n  const removeAll = () => {\n    [\n      actionSubscribers,\n      willFocusSubscribers,\n      didFocusSubscribers,\n      willBlurSubscribers,\n      didBlurSubscribers,\n      refocusSubscribers,\n    ].forEach(set => set.clear());\n\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      case 'refocus':\n        return refocusSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload, type };\n    const subscribers = getChildSubscribers(type);\n    subscribers &&\n      subscribers.forEach(subs => {\n        subs(payloadWithType);\n      });\n  };\n\n  // lastFocusEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  let lastFocusEvent = initialLastFocusEvent;\n\n  const upstreamEvents = [\n    'willFocus',\n    'didFocus',\n    'willBlur',\n    'didBlur',\n    'refocus',\n    'action',\n  ];\n\n  const upstreamSubscribers = upstreamEvents.map(eventName =>\n    addListener(eventName, payload => {\n      if (eventName === 'refocus') {\n        emit(eventName, payload);\n        return;\n      }\n\n      const { state, lastState, action } = payload;\n      const lastRoutes = lastState && lastState.routes;\n      const routes = state && state.routes;\n\n      // const lastFocusKey =\n      //   lastState && lastState.routes && lastState.routes[lastState.index].key;\n      const focusKey = routes && routes[state.index].key;\n\n      const isChildFocused = focusKey === key;\n      const lastRoute =\n        lastRoutes && lastRoutes.find(route => route.key === key);\n      const newRoute = routes && routes.find(route => route.key === key);\n      const childPayload = {\n        context: `${key}:${action.type}_${payload.context || 'Root'}`,\n        state: newRoute,\n        lastState: lastRoute,\n        action,\n        type: eventName,\n      };\n      const isTransitioning = !!state && state.isTransitioning;\n\n      const previouslylastFocusEvent = lastFocusEvent;\n\n      if (lastFocusEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n      if (lastFocusEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          previouslylastFocusEvent === 'didFocus'\n        ) {\n          // While focused, pass action events to children for grandchildren focus\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          isTransitioning\n        ) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    })\n  );\n\n  return {\n    addListener(eventName, eventHandler) {\n      const subscribers = getChildSubscribers(eventName);\n      if (!subscribers) {\n        throw new Error(`Invalid event name \"${eventName}\"`);\n      }\n      subscribers.add(eventHandler);\n      const remove = () => {\n        subscribers.delete(eventHandler);\n      };\n      return { remove };\n    },\n    emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\n          `navigation.emit only supports the 'refocus' event currently.`\n        );\n        return;\n      }\n      emit(eventName, payload);\n    },\n  };\n}\n"]}