{"version":3,"sources":["index.tsx"],"names":["React","StyleSheet","View","NativeSafeAreaView","SafeAreaContext","createContext","SafeAreaProvider","children","initialSafeAreaInsets","parentInsets","useParentSafeArea","useState","insets","setInsets","onInsetsChange","useCallback","event","nativeEvent","styles","fill","create","flex","SafeAreaConsumer","Consumer","useContext","useSafeArea","safeArea","Error","SafeAreaView","style","rest","paddingTop","top","paddingRight","right","paddingBottom","bottom","paddingLeft","left"],"mappings":"kSAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,UAAT,CAAqBC,IAArB,KAA4C,cAA5C,CAEA,MAAOC,CAAAA,kBAAP,KAA+B,sBAA/B,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAGJ,KAAK,CAACK,aAAN,CAAwC,IAAxC,CAAxB,CAOP,MAAO,SAASC,CAAAA,gBAAT,MAGe,IAFpBC,CAAAA,QAEoB,MAFpBA,QAEoB,CADpBC,qBACoB,MADpBA,qBACoB,CACpB,GAAMC,CAAAA,YAAY,CAAGC,iBAAiB,EAAtC,CADoB,oBAEQV,KAAK,CAACW,QAAN,CAC1BH,qBAAqB,EAAIC,YADC,CAFR,oDAEbG,MAFa,qBAELC,SAFK,qBAKpB,GAAMC,CAAAA,cAAc,CAAGd,KAAK,CAACe,WAAN,CAAkB,SAACC,KAAD,CAA8B,CACrEH,SAAS,CAACG,KAAK,CAACC,WAAN,CAAkBL,MAAnB,CAAT,CACD,CAFsB,CAEpB,EAFoB,CAAvB,CAIA,MACE,qBAAC,kBAAD,EAAoB,KAAK,CAAEM,MAAM,CAACC,IAAlC,CAAwC,cAAc,CAAEL,cAAxD,iDACGF,MAAM,EAAI,IAAV,CACC,oBAAC,eAAD,CAAiB,QAAjB,EAA0B,KAAK,CAAEA,MAAjC,iDACGL,QADH,CADD,CAIG,IALN,CADF,CASD,CAED,GAAMW,CAAAA,MAAM,CAAGjB,UAAU,CAACmB,MAAX,CAAkB,CAC/BD,IAAI,CAAE,CAAEE,IAAI,CAAE,CAAR,CADyB,CAAlB,CAAf,CAIA,MAAO,IAAMC,CAAAA,gBAAgB,CAAGlB,eAAe,CAACmB,QAAzC,CAEP,QAASb,CAAAA,iBAAT,EAAwE,CACtE,MAAOV,CAAAA,KAAK,CAACwB,UAAN,CAAiBpB,eAAjB,CAAP,CACD,CAED,MAAO,SAASqB,CAAAA,WAAT,EAAoC,CACzC,GAAMC,CAAAA,QAAQ,CAAG1B,KAAK,CAACwB,UAAN,CAAiBpB,eAAjB,CAAjB,CACA,GAAIsB,QAAQ,EAAI,IAAhB,CAAsB,CACpB,KAAM,IAAIC,CAAAA,KAAJ,CACJ,wGADI,CAAN,CAGD,CACD,MAAOD,CAAAA,QAAP,CACD,CAED,MAAO,SAASE,CAAAA,YAAT,OAGuC,IAF5CC,CAAAA,KAE4C,OAF5CA,KAE4C,CADzCC,IACyC,2CAC5C,GAAMlB,CAAAA,MAAM,CAAGa,WAAW,EAA1B,CAEA,MACE,qBAAC,IAAD,WACE,KAAK,CAAE,CACL,CACEM,UAAU,CAAEnB,MAAM,CAACoB,GADrB,CAEEC,YAAY,CAAErB,MAAM,CAACsB,KAFvB,CAGEC,aAAa,CAAEvB,MAAM,CAACwB,MAHxB,CAIEC,WAAW,CAAEzB,MAAM,CAAC0B,IAJtB,CADK,CAOLT,KAPK,CADT,EAUMC,IAVN,mDADF,CAcD","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\nimport { EdgeInsets as EdgeInsetsT, InsetChangedEvent } from './SafeArea.types';\nimport NativeSafeAreaView from './NativeSafeAreaView';\n\nexport const SafeAreaContext = React.createContext<EdgeInsetsT | null>(null);\n\nexport interface SafeAreaViewProps {\n  children?: React.ReactNode;\n  initialSafeAreaInsets?: EdgeInsetsT | null;\n}\n\nexport function SafeAreaProvider({\n  children,\n  initialSafeAreaInsets,\n}: SafeAreaViewProps) {\n  const parentInsets = useParentSafeArea();\n  const [insets, setInsets] = React.useState<EdgeInsetsT | null | undefined>(\n    initialSafeAreaInsets || parentInsets,\n  );\n  const onInsetsChange = React.useCallback((event: InsetChangedEvent) => {\n    setInsets(event.nativeEvent.insets);\n  }, []);\n\n  return (\n    <NativeSafeAreaView style={styles.fill} onInsetsChange={onInsetsChange}>\n      {insets != null ? (\n        <SafeAreaContext.Provider value={insets}>\n          {children}\n        </SafeAreaContext.Provider>\n      ) : null}\n    </NativeSafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fill: { flex: 1 },\n});\n\nexport const SafeAreaConsumer = SafeAreaContext.Consumer;\n\nfunction useParentSafeArea(): React.ContextType<typeof SafeAreaContext> {\n  return React.useContext(SafeAreaContext);\n}\n\nexport function useSafeArea(): EdgeInsetsT {\n  const safeArea = React.useContext(SafeAreaContext);\n  if (safeArea == null) {\n    throw new Error(\n      'No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.',\n    );\n  }\n  return safeArea;\n}\n\nexport function SafeAreaView({\n  style,\n  ...rest\n}: ViewProps & { children: React.ReactNode }) {\n  const insets = useSafeArea();\n\n  return (\n    <View\n      style={[\n        {\n          paddingTop: insets.top,\n          paddingRight: insets.right,\n          paddingBottom: insets.bottom,\n          paddingLeft: insets.left,\n        },\n        style,\n      ]}\n      {...rest}\n    />\n  );\n}\n\nexport type EdgeInsets = EdgeInsetsT;\n"]}