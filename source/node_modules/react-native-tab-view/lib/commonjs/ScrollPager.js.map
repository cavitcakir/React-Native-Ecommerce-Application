{"version":3,"sources":["ScrollPager.tsx"],"names":["event","divide","onChange","cond","eq","round","call","Value","Animated","ScrollPager","React","Component","x","props","navigationState","index","layout","width","y","createRef","key","keyboardDismissMode","onIndexChange","routes","findIndex","route","scrollTo","Keyboard","dismiss","animated","scrollViewRef","current","getNode","type","listener","enterListeners","push","indexOf","splice","nativeEvent","contentOffset","position","layoutWidthNode","componentDidMount","componentDidUpdate","prevProps","offset","length","setValue","componentWillUnmount","interactionHandle","InteractionManager","clearInteractionHandle","render","children","onSwipeStart","onSwipeEnd","overscroll","handleSwipeStart","createInteractionHandle","handleSwipeEnd","relativePosition","addListener","removeListener","jumpTo","swipeEnabled","onScroll","initialOffset","styles","container","flexDirection","flex","bounces","StyleSheet","create"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Keyboard, InteractionManager } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { Props } from './Pager';\nimport { Route, Listener } from './types';\n\nconst { event, divide, onChange, cond, eq, round, call, Value } = Animated;\n\ntype State = {\n  initialOffset: { x: number; y: number };\n};\n\nexport default class ScrollPager<T extends Route> extends React.Component<\n  Props<T> & { overscroll?: boolean },\n  State\n> {\n  static defaultProps = {\n    bounces: true,\n  };\n\n  componentDidMount() {\n    if (this.props.layout.width) {\n      this.scrollTo(\n        this.props.navigationState.index * this.props.layout.width,\n        false\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const offset = this.props.navigationState.index * this.props.layout.width;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        this.props.navigationState.routes.length ||\n      prevProps.layout.width !== this.props.layout.width\n    ) {\n      this.scrollTo(offset, false);\n    } else if (\n      prevProps.navigationState.index !== this.props.navigationState.index\n    ) {\n      this.scrollTo(offset);\n    }\n\n    if (prevProps.layout.width !== this.props.layout.width) {\n      this.layoutWidthNode.setValue(this.props.layout.width);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  private initialOffset = {\n    x: this.props.navigationState.index * this.props.layout.width,\n    y: 0,\n  };\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    if (navigationState.index === index) {\n      this.scrollTo(index * this.props.layout.width);\n    } else {\n      onIndexChange(index);\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private scrollTo = (x: number, animated = true) => {\n    if (this.scrollViewRef.current) {\n      this.scrollViewRef.current.getNode().scrollTo({\n        x,\n        animated: animated,\n      });\n    }\n  };\n\n  private enterListeners: Listener[] = [];\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private position = new Animated.Value(\n    this.props.navigationState.index * this.props.layout.width\n  );\n\n  private onScroll = event([\n    {\n      nativeEvent: {\n        contentOffset: {\n          x: this.position,\n        },\n      },\n    },\n  ]);\n\n  private layoutWidthNode = new Value(this.props.layout.width);\n\n  private relativePosition = divide(this.position, this.layoutWidthNode);\n\n  render() {\n    const {\n      children,\n      layout,\n      onSwipeStart,\n      onSwipeEnd,\n      overscroll,\n      onIndexChange,\n      navigationState,\n    } = this.props;\n\n    const handleSwipeStart = () => {\n      onSwipeStart?.();\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    };\n\n    const handleSwipeEnd = () => {\n      onSwipeEnd?.();\n      if (this.interactionHandle !== null) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n      }\n    };\n\n    return children({\n      position: this.relativePosition,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: (children) => (\n        <Animated.ScrollView\n          pagingEnabled\n          directionalLockEnabled\n          keyboardDismissMode=\"on-drag\"\n          keyboardShouldPersistTaps=\"always\"\n          overScrollMode=\"never\"\n          scrollToOverflowEnabled\n          scrollEnabled={this.props.swipeEnabled}\n          automaticallyAdjustContentInsets={false}\n          bounces={overscroll}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          scrollEventThrottle={1}\n          onScroll={this.onScroll}\n          onScrollBeginDrag={handleSwipeStart}\n          onScrollEndDrag={handleSwipeEnd}\n          onMomentumScrollEnd={this.onScroll}\n          contentOffset={this.initialOffset}\n          style={styles.container}\n          contentContainerStyle={\n            layout.width\n              ? {\n                  flexDirection: 'row',\n                  width: layout.width * navigationState.routes.length,\n                  flex: 1,\n                }\n              : null\n          }\n          ref={this.scrollViewRef}\n        >\n          {children}\n          <Animated.Code\n            exec={onChange(\n              this.relativePosition,\n              cond(eq(round(this.relativePosition), this.relativePosition), [\n                call([this.relativePosition], ([relativePosition]) =>\n                  onIndexChange(relativePosition)\n                ),\n              ])\n            )}\n          />\n        </Animated.ScrollView>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}