"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedSwitchNavigator;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNavigation = require("react-navigation");

var _reactNativeReanimated = require("react-native-reanimated");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const DEFAULT_TRANSITION = React.createElement(_reactNativeReanimated.Transition.Together, null, React.createElement(_reactNativeReanimated.Transition.Out, {
  type: "fade",
  durationMs: 200,
  interpolation: "easeIn"
}), React.createElement(_reactNativeReanimated.Transition.In, {
  type: "fade",
  durationMs: 200
}));

class AnimatedSwitchView extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "containerRef", React.createRef());
  }

  componentDidUpdate(prevProps) {
    const {
      state: prevState
    } = prevProps.navigation;
    const prevActiveKey = prevState.routes[prevState.index].key;
    const {
      state
    } = this.props.navigation;
    const activeKey = state.routes[state.index].key;

    if (activeKey !== prevActiveKey && this.containerRef.current) {
      this.containerRef.current.animateNextTransition();
    }
  }

  render() {
    const {
      navigationConfig,
      screenProps
    } = this.props;
    const {
      state
    } = this.props.navigation;
    const activeKey = state.routes[state.index].key;
    const descriptor = this.props.descriptors[activeKey];
    const ChildComponent = descriptor.getComponent();
    const transition = (navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.transition) || DEFAULT_TRANSITION;
    const transitionViewStyle = (navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.transitionViewStyle) || null;
    return React.createElement(_reactNativeReanimated.Transitioning.View, {
      ref: this.containerRef,
      transition: transition,
      style: [styles.container, transitionViewStyle]
    }, React.createElement(_reactNavigation.SceneView, {
      component: ChildComponent,
      navigation: descriptor.navigation,
      screenProps: screenProps
    }));
  }

}

function createAnimatedSwitchNavigator(routeConfigMap, switchConfig = {}) {
  const router = (0, _reactNavigation.SwitchRouter)(routeConfigMap, switchConfig); // TODO: don't have time to fix it right now
  // @ts-ignore

  const Navigator = (0, _reactNavigation.createNavigator)(AnimatedSwitchView, router, switchConfig);
  return Navigator;
}

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=index.js.map