function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { StyleSheet } from 'react-native';
import { createNavigator, SceneView, SwitchRouter } from 'react-navigation';
import { Transitioning, Transition } from 'react-native-reanimated';
const DEFAULT_TRANSITION = React.createElement(Transition.Together, null, React.createElement(Transition.Out, {
  type: "fade",
  durationMs: 200,
  interpolation: "easeIn"
}), React.createElement(Transition.In, {
  type: "fade",
  durationMs: 200
}));

class AnimatedSwitchView extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "containerRef", React.createRef());
  }

  componentDidUpdate(prevProps) {
    const {
      state: prevState
    } = prevProps.navigation;
    const prevActiveKey = prevState.routes[prevState.index].key;
    const {
      state
    } = this.props.navigation;
    const activeKey = state.routes[state.index].key;

    if (activeKey !== prevActiveKey && this.containerRef.current) {
      this.containerRef.current.animateNextTransition();
    }
  }

  render() {
    const {
      navigationConfig,
      screenProps
    } = this.props;
    const {
      state
    } = this.props.navigation;
    const activeKey = state.routes[state.index].key;
    const descriptor = this.props.descriptors[activeKey];
    const ChildComponent = descriptor.getComponent();
    const transition = (navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.transition) || DEFAULT_TRANSITION;
    const transitionViewStyle = (navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.transitionViewStyle) || null;
    return React.createElement(Transitioning.View, {
      ref: this.containerRef,
      transition: transition,
      style: [styles.container, transitionViewStyle]
    }, React.createElement(SceneView, {
      component: ChildComponent,
      navigation: descriptor.navigation,
      screenProps: screenProps
    }));
  }

}

export default function createAnimatedSwitchNavigator(routeConfigMap, switchConfig = {}) {
  const router = SwitchRouter(routeConfigMap, switchConfig); // TODO: don't have time to fix it right now
  // @ts-ignore

  const Navigator = createNavigator(AnimatedSwitchView, router, switchConfig);
  return Navigator;
}
const styles = StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=index.js.map