{"version":3,"sources":["index.tsx"],"names":["React","StyleSheet","createNavigator","SceneView","SwitchRouter","Transitioning","Transition","DEFAULT_TRANSITION","AnimatedSwitchView","Component","createRef","componentDidUpdate","prevProps","state","prevState","navigation","prevActiveKey","routes","index","key","props","activeKey","containerRef","current","animateNextTransition","render","navigationConfig","screenProps","descriptor","descriptors","ChildComponent","getComponent","transition","transitionViewStyle","styles","container","createAnimatedSwitchNavigator","routeConfigMap","switchConfig","router","Navigator","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, ViewStyle } from 'react-native';\nimport {\n  createNavigator,\n  CreateNavigatorConfig,\n  NavigationDescriptor,\n  NavigationParams,\n  NavigationProp,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  NavigationScreenProp,\n  NavigationState,\n  NavigationSwitchProp,\n  NavigationSwitchRouterConfig,\n  SceneView,\n  SwitchRouter,\n  SupportedThemes,\n  NavigationScreenConfig,\n} from 'react-navigation';\nimport {\n  TransitioningView,\n  Transitioning,\n  Transition,\n} from 'react-native-reanimated';\n\nconst DEFAULT_TRANSITION = (\n  <Transition.Together>\n    <Transition.Out type=\"fade\" durationMs={200} interpolation=\"easeIn\" />\n    <Transition.In type=\"fade\" durationMs={200} />\n  </Transition.Together>\n);\n\ntype Props = {\n  navigationConfig: NavigationAnimatedSwitchConfig;\n  navigation: NavigationProp<NavigationState>;\n  descriptors: {\n    [key: string]: NavigationDescriptor<\n      NavigationParams,\n      NavigationAnimatedSwitchOptions,\n      NavigationSwitchProp<NavigationRoute, any>\n    >;\n  };\n  screenProps?: unknown;\n};\n\nclass AnimatedSwitchView extends React.Component<Props> {\n  componentDidUpdate(prevProps: Props) {\n    const { state: prevState } = prevProps.navigation;\n    const prevActiveKey = prevState.routes[prevState.index].key;\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n\n    if (activeKey !== prevActiveKey && this.containerRef.current) {\n      this.containerRef.current.animateNextTransition();\n    }\n  }\n\n  private containerRef = React.createRef<TransitioningView>();\n\n  render() {\n    const { navigationConfig, screenProps } = this.props;\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n    const descriptor = this.props.descriptors[activeKey];\n    const ChildComponent = descriptor.getComponent();\n\n    const transition = navigationConfig?.transition || DEFAULT_TRANSITION;\n    const transitionViewStyle = navigationConfig?.transitionViewStyle || null;\n\n    return (\n      <Transitioning.View\n        ref={this.containerRef}\n        transition={transition}\n        style={[styles.container, transitionViewStyle]}\n      >\n        <SceneView\n          component={ChildComponent}\n          navigation={descriptor.navigation}\n          screenProps={screenProps}\n        />\n      </Transitioning.View>\n    );\n  }\n}\n\nexport type NavigationAnimatedSwitchConfig = NavigationSwitchRouterConfig & {\n  transition?: React.ReactNode;\n  transitionViewStyle?: ViewStyle;\n};\n\nexport type NavigationAnimatedSwitchOptions = {};\n\nexport type NavigationAnimatedSwitchProp<\n  State = NavigationRoute,\n  Params = NavigationParams\n> = NavigationScreenProp<State, Params> & {\n  jumpTo: (routeName: string, key?: string) => void;\n};\n\nexport type NavigationAnimatedSwitchScreenProps<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = {\n  theme: SupportedThemes;\n  navigation: NavigationAnimatedSwitchProp<NavigationRoute, Params>;\n  screenProps: ScreenProps;\n};\n\nexport type NavigationAnimatedSwitchScreenComponent<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = React.ComponentType<\n  NavigationAnimatedSwitchScreenProps<Params, ScreenProps>\n> & {\n  navigationOptions?: NavigationScreenConfig<\n    NavigationAnimatedSwitchOptions,\n    NavigationAnimatedSwitchProp<NavigationRoute, Params>,\n    ScreenProps\n  >;\n};\n\nexport default function createAnimatedSwitchNavigator(\n  routeConfigMap: NavigationRouteConfigMap<{}, NavigationAnimatedSwitchProp>,\n  switchConfig: CreateNavigatorConfig<\n    NavigationAnimatedSwitchConfig,\n    NavigationSwitchRouterConfig,\n    NavigationAnimatedSwitchOptions,\n    NavigationAnimatedSwitchProp<NavigationRoute, any>\n  > = {}\n) {\n  const router = SwitchRouter(routeConfigMap, switchConfig);\n\n  // TODO: don't have time to fix it right now\n  // @ts-ignore\n  const Navigator = createNavigator(AnimatedSwitchView, router, switchConfig);\n\n  return Navigator;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}