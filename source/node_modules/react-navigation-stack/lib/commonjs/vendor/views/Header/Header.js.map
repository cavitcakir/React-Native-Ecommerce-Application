{"version":3,"sources":["Header.tsx"],"names":["Header","React","memo","props","scene","previous","layout","insets","navigation","styleInterpolator","options","descriptor","title","headerTitle","undefined","route","routeName","leftLabel","headerBackTitle","o","goBack","useCallback","dispatch","StackActions","pop","key","Object","defineProperty","get","console","warn","Dimensions"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAGA,MAAMA,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAW,SAASF,MAAT,CAAgBG,KAAhB,EAAyC;AACjE,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFN,KAPJ;AAQA,QAAM;AAAEO,IAAAA;AAAF,MAAcN,KAAK,CAACO,UAA1B;AACA,QAAMC,KAAK,GACT,OAAOF,OAAO,CAACG,WAAf,KAA+B,UAA/B,IACAH,OAAO,CAACG,WAAR,KAAwBC,SADxB,GAEIJ,OAAO,CAACG,WAFZ,GAGIH,OAAO,CAACE,KAAR,KAAkBE,SAAlB,GACAJ,OAAO,CAACE,KADR,GAEAR,KAAK,CAACW,KAAN,CAAYC,SANlB;AAQA,MAAIC,SAAJ,CAlBiE,CAoBjE;AACA;;AACA,MAAIP,OAAO,CAACQ,eAAR,KAA4BJ,SAAhC,EAA2C;AACzCG,IAAAA,SAAS,GAAGP,OAAO,CAACQ,eAApB;AACD,GAFD,MAEO,IAAIb,QAAJ,EAAc;AACnB,UAAMc,CAAC,GAAGd,QAAQ,CAACM,UAAT,CAAoBD,OAA9B;AAEAO,IAAAA,SAAS,GACP,OAAOE,CAAC,CAACN,WAAT,KAAyB,UAAzB,IAAuCM,CAAC,CAACN,WAAF,KAAkBC,SAAzD,GACIK,CAAC,CAACN,WADN,GAEIM,CAAC,CAACP,KAAF,KAAYE,SAAZ,GACAK,CAAC,CAACP,KADF,GAEAP,QAAQ,CAACU,KAAT,CAAeC,SALrB;AAMD;;AAED,QAAMI,MAAM,GAAGnB,KAAK,CAACoB,WAAN,CACb,uBAAS,MAAM;AACbb,IAAAA,UAAU,CAACc,QAAX,CAAoBC,8BAAaC,GAAb,CAAiB;AAAEC,MAAAA,GAAG,EAAErB,KAAK,CAACW,KAAN,CAAYU;AAAnB,KAAjB,CAApB;AACD,GAFD,EAEG,EAFH,CADa,EAIb,CAACjB,UAAD,EAAaJ,KAAK,CAACW,KAAN,CAAYU,GAAzB,CAJa,CAAf;AAOA,sBACE,oBAAC,sBAAD,eACMf,OADN;AAEE,IAAA,MAAM,EAAEH,MAFV;AAGE,IAAA,MAAM,EAAED,MAHV;AAIE,IAAA,KAAK,EAAEF,KAJT;AAKE,IAAA,KAAK,EAAEQ,KALT;AAME,IAAA,SAAS,EAAEK,SANb;AAOE,IAAA,WAAW,EACT,OAAOP,OAAO,CAACG,WAAf,KAA+B,UAA/B,GACKV,KAAD,IAAkC;AAChC;AACA,0BAAO,oBAAC,oBAAD,EAAiBA,KAAjB,CAAP;AACD,KAJL,GAKIO,OAAO,CAACG,WAbhB;AAeE,IAAA,QAAQ,EAAER,QAAQ,GAAGe,MAAH,GAAYN,SAfhC;AAgBE,IAAA,iBAAiB,EAAEL;AAhBrB,KADF;AAoBD,CA9Dc,CAAf;AAgEAiB,MAAM,CAACC,cAAP,CAAsB3B,MAAtB,EAA8B,QAA9B,EAAwC;AACtC4B,EAAAA,GAAG,GAAG;AACJC,IAAAA,OAAO,CAACC,IAAR,CACE,oJADF;AAIA,WAAO,2CACLC,wBAAWH,GAAX,CAAe,QAAf,CADK,EAEL,kDAAmB,IAAnB,CAFK,CAAP;AAID;;AAVqC,CAAxC;eAae5B,M","sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport { StackActions } from 'react-navigation';\nimport { getStatusBarHeight } from 'react-native-iphone-x-helper';\n\nimport HeaderSegment, { getDefaultHeaderHeight } from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nimport { StackHeaderProps, StackHeaderTitleProps } from '../../types';\n\nconst Header = React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.routeName;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.routeName;\n  }\n\n  const goBack = React.useCallback(\n    debounce(() => {\n      navigation.dispatch(StackActions.pop({ key: scene.route.key }));\n    }, 50),\n    [navigation, scene.route.key]\n  );\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => {\n              // @ts-ignore\n              return <HeaderTitle {...props} />;\n            }\n          : options.headerTitle\n      }\n      onGoBack={previous ? goBack : undefined}\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n\nObject.defineProperty(Header, 'HEIGHT', {\n  get() {\n    console.warn(\n      \"Deprecation in 'createStackNavigator': 'Header.HEIGHT' will be removed in a future version. Use 'useHeaderHeight' or 'HeaderHeightContext' instead\"\n    );\n\n    return getDefaultHeaderHeight(\n      Dimensions.get('window'),\n      getStatusBarHeight(true)\n    );\n  },\n});\n\nexport default Header;\n"]}