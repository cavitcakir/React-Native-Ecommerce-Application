{"version":3,"sources":["HeaderContainer.tsx"],"names":["HeaderContainer","mode","scenes","layout","insets","getFocusedRoute","getPreviousRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","slice","map","scene","i","self","length","options","descriptor","isFocused","key","route","previousRoute","previous","j","s","previousScene","nextScene","isHeaderStatic","headerShown","props","navigation","forSlideUp","forSlideRight","forSlideLeft","forNoAnimation","e","height","nativeEvent","undefined","headerTransparent","styles","header","StyleSheet","create","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { NavigationContext } from 'react-navigation';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport {\n  Route,\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getFocusedRoute,\n  getPreviousRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { options } = scene.descriptor;\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previousRoute = getPreviousRoute({ route: scene.route });\n\n        let previous;\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = i - 1; j >= 0; j--) {\n            const s = self[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previous = s;\n              break;\n            }\n          }\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n        const isHeaderStatic =\n          (previousScene &&\n            previousScene.descriptor.options.headerShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          (nextScene && nextScene.descriptor.options.headerShown === false);\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) =>\n                        onContentHeightChange({\n                          route: scene.route,\n                          height: e.nativeEvent.layout.height,\n                        })\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || options.headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {options.headerShown !== false ? (\n                  options.header !== undefined ? (\n                    options.header(props)\n                  ) : (\n                    <Header {...props} />\n                  )\n                ) : null}\n              </View>\n            </>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}