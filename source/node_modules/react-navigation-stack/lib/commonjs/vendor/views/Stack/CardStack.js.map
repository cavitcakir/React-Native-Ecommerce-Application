{"version":3,"sources":["CardStack.tsx"],"names":["EPSILON","MaybeScreenContainer","enabled","rest","MaybeScreen","active","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","height","StyleSheet","flatten","headerStyle","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","ModalTransition","DefaultTransition","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","React","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","Dimensions","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","forNoAnimationHeader","right","bottom","left","isScreensEnabled","Platform","OS","styles","container","handleLayout","focused","isScreenActive","extrapolate","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","forNoAnimationCard","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","previousScene","j","s","absoluteFill","handleHeaderLayout","getFocusedRoute","onContentHeightChange","styleInterpolator","style","floating","create","flex","overflow","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n  ViewProps,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens'; // Import with * as to prevent getters being called\nimport { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Route,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    return <ScreenContainer {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: number | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    // @ts-ignore\n    return <Screen active={active} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS === 'android' && mode !== 'modal';\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            const isScreenActive = scene.progress.next\n              ? scene.progress.next.interpolate({\n                  inputRange: [0, 1 - EPSILON, 1],\n                  outputRange: [1, 1, 0],\n                  extrapolate: 'clamp',\n                })\n              : 1;\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const previousRoute = getPreviousRoute({ route: scene.route });\n\n            let previousScene = scenes[index - 1];\n\n            if (previousRoute) {\n              // The previous scene will be shortly before the current scene in the array\n              // So loop back from current index to avoid looping over the full array\n              for (let j = index - 1; j >= 0; j--) {\n                const s = scenes[j];\n\n                if (s && s.route.key === previousRoute.key) {\n                  previousScene = s;\n                  break;\n                }\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={previousScene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              getPreviousRoute,\n              getFocusedRoute: this.getFocusedRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              gestureDirection:\n                focusedOptions.gestureDirection !== undefined\n                  ? focusedOptions.gestureDirection\n                  : defaultTransitionPreset.gestureDirection,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}