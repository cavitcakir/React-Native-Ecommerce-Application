{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","React","Component","render","Platform","OS","Version","props","style","pressColor","borderless","children","rest","TouchableNativeFeedback","canUseNativeForeground","Ripple","Children","only","top","bottom","right","left","disabled"],"mappings":";;;;;;;AASA;;AACA;;AAQA;;;;;;;;;;;;;;;;AAUA,MAAMA,wBAAwB,GAAG,EAAjC;;AAEe,MAAMC,aAAN,SAA4BC,KAAK,CAACC,SAAlC,CAAmD;AAMhEC,EAAAA,MAAM,GAAG;AACP;;;;;;;;AAQA,QACEC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoBP,wBAFtB,EAGE;AACA,0BAA6D,KAAKQ,KAAlE;AAAA,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA,UAAT;AAAqBC,QAAAA,UAArB;AAAiCC,QAAAA;AAAjC,OAAN;AAAA,YAAoDC,IAApD;;AAEA,0BACE,oBAAC,oCAAD,eACMA,IADN;AAEE,QAAA,aAAa,EAAEC,qCAAwBC,sBAAxB,EAFjB;AAGE,QAAA,UAAU,EAAED,qCAAwBE,MAAxB,CAA+BN,UAA/B,EAA2CC,UAA3C;AAHd,uBAKE,oBAAC,iBAAD;AAAM,QAAA,KAAK,EAAEF;AAAb,SAAqBP,KAAK,CAACe,QAAN,CAAeC,IAAf,CAAoBN,QAApB,CAArB,CALF,CADF;AASD,KAfD,MAeO,IAAIP,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AAChC,0BACE,oBAAC,yBAAD;AACE,QAAA,OAAO,EAAE;AAAEa,UAAAA,GAAG,EAAE,EAAP;AAAWC,UAAAA,MAAM,EAAE,EAAnB;AAAuBC,UAAAA,KAAK,EAAE,EAA9B;AAAkCC,UAAAA,IAAI,EAAE;AAAxC,SADX;AAEE,QAAA,oBAAoB,MAFtB;AAGE,QAAA,OAAO,EAAE,CAAC,KAAKd,KAAL,CAAWe;AAHvB,SAIM,KAAKf,KAJX,GAMG,KAAKA,KAAL,CAAWI,QANd,CADF;AAUD,KAXM,MAWA;AACL,0BACE,oBAAC,6BAAD,EAAsB,KAAKJ,KAA3B,EACG,KAAKA,KAAL,CAAWI,QADd,CADF;AAKD;AACF;;AAhD+D;;;;gBAA7CX,a,kBACG;AACpBU,EAAAA,UAAU,EAAE,KADQ;AAEpBD,EAAAA,UAAU,EAAE;AAFQ,C","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport BorderlessButton from './BorderlessButton';\n\ntype Props = ViewProps & {\n  pressColor: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, pressColor, borderless, children, ...rest } = this.props;\n\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else if (Platform.OS === 'ios') {\n      return (\n        <BorderlessButton\n          hitSlop={{ top: 10, bottom: 10, right: 10, left: 10 }}\n          disallowInterruption\n          enabled={!this.props.disabled}\n          {...this.props}\n        >\n          {this.props.children}\n        </BorderlessButton>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...this.props}>\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]}