{"version":3,"sources":["Card.tsx"],"names":["React","Animated","View","StyleSheet","Platform","InteractionManager","PanGestureHandler","State","GestureState","Color","StackGestureRefContext","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","OS","Card","Component","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransitionStart","toValue","getAnimateToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","config","isInteraction","start","finished","handleEndInteraction","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","undefined","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","BEGAN","isSwiping","setValue","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","isClosing","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","gestureActivationCriteria","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","children","containerStyle","customContainerStyle","contentStyle","rest","interpolatedStyle","getInterpolatedStyle","animationContext","getCardAnimationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","flatten","isTransparent","alpha","absoluteFill","style","styles","container","gestureRef","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","content","create","flex","overflow","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\nimport StackGestureRefContext from '../../utils/GestureHandlerRefContext';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({ style }: { style: StyleProp<ViewStyle> }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: any;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransitionStart?.({ closing });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : false;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(\n            onClose,\n            32\n          ) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private gestureRef = React.createRef<PanGestureHandler>();\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor\n      ? Color(backgroundColor).alpha() === 0\n      : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              ref={this.gestureRef}\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <View\n                  ref={this.contentRef}\n                  style={[styles.content, contentStyle]}\n                >\n                  <StackGestureRefContext.Provider value={this.gestureRef}>\n                    {children}\n                  </StackGestureRefContext.Provider>\n                </View>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]}