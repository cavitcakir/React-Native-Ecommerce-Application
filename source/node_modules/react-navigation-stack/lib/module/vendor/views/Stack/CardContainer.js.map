{"version":3,"sources":["CardContainer.tsx"],"names":["React","View","StyleSheet","Card","HeaderHeightContext","useTheme","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","getFocusedRoute","headerMode","headerShown","headerStyleInterpolator","headerTransparent","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","useEffect","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","listener","progress","next","addListener","value","removeListener","current","marginTop","backgroundColor","background","absoluteFill","styles","container","mode","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport useTheme from '../../../utils/useTheme';\nimport {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  getFocusedRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // `addListener` may not exist on web and older versions of React Native\n    // @ts-ignore\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-ignore\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle] as any}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            {renderScene({ route: scene.route })}\n          </HeaderHeightContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousRoute,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}