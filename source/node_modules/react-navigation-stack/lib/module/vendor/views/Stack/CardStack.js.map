{"version":3,"sources":["CardStack.tsx"],"names":["React","Animated","View","StyleSheet","Dimensions","Platform","ScreenContainer","Screen","screensEnabled","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","MaybeScreenContainer","enabled","rest","MaybeScreen","active","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","height","flatten","headerStyle","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","isScreensEnabled","OS","styles","container","handleLayout","focused","isScreenActive","extrapolate","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","previousScene","j","s","absoluteFill","handleHeaderLayout","getFocusedRoute","onContentHeightChange","styleInterpolator","style","floating","create","flex","overflow","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n  ViewProps,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens'; // Import with * as to prevent getters being called\nimport { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Route,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    return <ScreenContainer {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: number | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    // @ts-ignore\n    return <Screen active={active} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS === 'android' && mode !== 'modal';\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            const isScreenActive = scene.progress.next\n              ? scene.progress.next.interpolate({\n                  inputRange: [0, 1 - EPSILON, 1],\n                  outputRange: [1, 1, 0],\n                  extrapolate: 'clamp',\n                })\n              : 1;\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const previousRoute = getPreviousRoute({ route: scene.route });\n\n            let previousScene = scenes[index - 1];\n\n            if (previousRoute) {\n              // The previous scene will be shortly before the current scene in the array\n              // So loop back from current index to avoid looping over the full array\n              for (let j = index - 1; j >= 0; j--) {\n                const s = scenes[j];\n\n                if (s && s.route.key === previousRoute.key) {\n                  previousScene = s;\n                  break;\n                }\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={previousScene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              getPreviousRoute,\n              getFocusedRoute: this.getFocusedRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              gestureDirection:\n                focusedOptions.gestureDirection !== undefined\n                  ? focusedOptions.gestureDirection\n                  : defaultTransitionPreset.gestureDirection,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}