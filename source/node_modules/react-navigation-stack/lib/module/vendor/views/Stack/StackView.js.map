{"version":3,"sources":["StackView.tsx"],"names":["React","View","Platform","StyleSheet","SafeAreaConsumer","GestureHandlerRootView","StackActions","SceneView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","undefined","OS","filter","r","includes","findIndex","props","navigation","getComponent","SceneComponent","screenProps","isTransitioning","dispatch","completeTransition","toChildKey","handleTransitionComplete","setState","find","pop","prune","closing","onTransitionStart","onTransitionEnd","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","render","keyboardHandlingEnabled","mode","rest","headerMode","styles","container","insets","getPreviousRoute","getGesturesEnabled","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  SceneView,\n} from 'react-navigation';\n\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.find((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.find((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = () => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.handleTransitionComplete();\n    this.setState((state) => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter((r) => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(\n        (key) => key !== route.key\n      ),\n      closingRouteKeys: state.closingRouteKeys.filter(\n        (key) => key !== route.key\n      ),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.find((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      this.handleTransitionComplete();\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaConsumer>\n            {(insets) => (\n              <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                {(props) => (\n                  <CardStack\n                    mode={mode}\n                    insets={insets as EdgeInsets}\n                    getPreviousRoute={this.getPreviousRoute}\n                    getGesturesEnabled={this.getGesturesEnabled}\n                    routes={routes}\n                    openingRouteKeys={openingRouteKeys}\n                    closingRouteKeys={closingRouteKeys}\n                    onOpenRoute={this.handleOpenRoute}\n                    onCloseRoute={this.handleCloseRoute}\n                    onTransitionStart={this.handleTransitionStart}\n                    onTransitionEnd={this.handleTransitionEnd}\n                    renderHeader={this.renderHeader}\n                    renderScene={this.renderScene}\n                    headerMode={headerMode}\n                    state={state}\n                    descriptors={descriptors}\n                    {...rest}\n                    {...props}\n                  />\n                )}\n              </KeyboardManager>\n            )}\n          </SafeAreaConsumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}